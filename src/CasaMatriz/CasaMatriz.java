/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CasaMatriz;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;


/**
 *
 * @author SrDeLorean
 */
public class CasaMatriz extends javax.swing.JFrame{

    private int puerto;
    private Conexion s;
    private ConexionBDGoogleCloud conexionBDGoogleCloud = new ConexionBDGoogleCloud();
    private ConexionBDLocal conexionBDLocal = new ConexionBDLocal();
    private Connection con;
    private Statement st;
    private ResultSet rs;
    private ArrayList<Compra> backupCompras;
    private ArrayList<EstacionDeServicio> backupEstacionDeServicio;
    private ArrayList<Precios> backupPrecios;
    
    public CasaMatriz() {
        initComponents();
        this.estacionesDeServicios.setSelectedIndex(0);
        s = new Conexion(5000);
        this.actualizarEstacionesServicios();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        precioAUno = new javax.swing.JButton();
        reporte = new javax.swing.JButton();
        b93 = new javax.swing.JTextField();
        b95 = new javax.swing.JTextField();
        b97 = new javax.swing.JTextField();
        disel = new javax.swing.JTextField();
        kerosene = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        estacionesDeServicios = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        estacionesDeServicios1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        backups = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        precioAUno.setText("Actualizar precios");
        precioAUno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioAUnoActionPerformed(evt);
            }
        });

        reporte.setText("Generar Informe");
        reporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("93");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("95");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("97");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Disel");

        jLabel5.setText("Kerosene");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Casa Matriz");

        estacionesDeServicios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas" }));
        estacionesDeServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estacionesDeServiciosActionPerformed(evt);
            }
        });

        jButton1.setText("Nueva Sucursal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Elija una sucursal ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Cambio de precios");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Nuevos precios a fijar por litro (L)");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Agregar una sucursal");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Informe de ventas por tipo de combustible");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Elija una sucursal ");

        estacionesDeServicios1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estacionesDeServicios1ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Tipo de combustible");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "93", "95", "97", "Diesel", "Kerosene" }));

        backups.setText("Simulaci√≥n backups");
        backups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(estacionesDeServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(precioAUno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jSeparator3)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estacionesDeServicios1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(disel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b93, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b95, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b97, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(kerosene, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reporte, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(backups, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jButton1))
                .addGap(10, 10, 10)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel8)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(estacionesDeServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(10, 10, 10)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b93, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b95, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b97, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kerosene, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(precioAUno, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(estacionesDeServicios1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reporte, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(backups, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void precioAUnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioAUnoActionPerformed
        // TODO add your handling code here:
        //Precios precios = new Precios(Double.parseDouble(b93.getText()), Double.parseDouble(b95.getText()), Double.parseDouble(b97.getText()), Double.parseDouble(disel.getText()), Double.parseDouble(kerosene.getText()));

        
        int idSucursal = this.obtenerIdSucursal();
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        if (this.estacionesDeServicios.getSelectedIndex()!= 0) {
            try {
                String sql = "insert into precios(idSucursal,b93,b95,b97,diesel,kerosene,fecha) values('"+idSucursal+"','"+b93.getText()+"','"+Double.parseDouble(b95.getText()) +"','"+ Double.parseDouble(b97.getText())+"','"+Double.parseDouble(disel.getText()) +"','"+Double.parseDouble(kerosene.getText()) +"','"+dateFormat.format(date) +"')";
                con = conexionBDGoogleCloud.getConnection();
                st = con.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Actualizacion de precios realizada corectamente");
                this.b93.setText("");
                this.b95.setText("");
                this.b97.setText("");
                this.disel.setText("");
                this.kerosene.setText("");
                this.estacionesDeServicios.setSelectedIndex(0);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        else {    
            String sql = "Select * from estacionesdeservicio";
            try {
                ArrayList<EstacionDeServicio>estacionesDeServicio = new ArrayList<>();
                con = this.conexionBDLocal.getConnection();
                st = con.createStatement();
                rs = st.executeQuery(sql);
                while(rs.next()) {
                    EstacionDeServicio e = new EstacionDeServicio(rs.getInt("id"),rs.getString("nombre"),rs.getString("direccion"));
                    estacionesDeServicio.add(e);
                }
                for (int i = 0; i < estacionesDeServicio.size(); i++) {
                    int idSucursalMomentanea = estacionesDeServicio.get(i).getId();
                    try {
                        String sql2 = "insert into precios(idSucursal,b93,b95,b97,diesel,kerosene,fecha) values('"+idSucursalMomentanea+"','"+b93.getText()+"','"+Double.parseDouble(b95.getText()) +"','"+ Double.parseDouble(b97.getText())+"','"+Double.parseDouble(disel.getText()) +"','"+Double.parseDouble(kerosene.getText()) +"','"+dateFormat.format(date) +"')";
                        con = conexionBDGoogleCloud.getConnection();
                        st = con.createStatement();
                        st.executeUpdate(sql2);
                        JOptionPane.showMessageDialog(null, "Actualizacion de precios realizada corectamente");
                        this.b93.setText("");
                        this.b95.setText("");
                        this.b97.setText("");
                        this.disel.setText("");
                        this.kerosene.setText("");
                        this.estacionesDeServicios.setSelectedIndex(0);
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            } catch (Exception e) {
                //algo
            }
            
        }
        
    }//GEN-LAST:event_precioAUnoActionPerformed

    private int obtenerIdSucursal(){
        int id = 0;
    
        int seleccionado = this.estacionesDeServicios.getSelectedIndex();
        String sql = "Select * from estacionesdeservicio where id = '"+seleccionado+"'";
        try {
            con = this.conexionBDLocal.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            EstacionDeServicio e = null;
            while(rs.next()) {
                e = new EstacionDeServicio(rs.getInt("id"),rs.getString("nombre"),rs.getString("direccion"));
            }
            id = e.getId();
            return id;
            
        } catch (Exception e) {
            //algo
        }

        return id;
    }
       
    private void reporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteActionPerformed
        try {
            // TODO add your handling code here:
            s.obtenerInformacionDeLaEstacion(this.estacionesDeServicios1.getSelectedIndex(), this.jComboBox1.getItemAt(this.jComboBox1.getSelectedIndex()));
            String estacion = this.estacionesDeServicios1.getItemAt(this.estacionesDeServicios1.getSelectedIndex());
            String tipoCombustible = this.jComboBox1.getItemAt(this.jComboBox1.getSelectedIndex());
            ArrayList<String[]> informe = s.getInforme();
            int cantidadDeCargas = s.getCantidadDeCargas();
            Double litrosConsumidos = s.getLitrosConsumidos(); 
            this.crearInforme(estacion,tipoCombustible,informe,cantidadDeCargas,litrosConsumidos);
            
        } catch (IOException ex) {
            Logger.getLogger(CasaMatriz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JOptionPane.showMessageDialog(null,"Operacion realizada con exito");
    }//GEN-LAST:event_reporteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CrearConexion frame = new CrearConexion(this);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void estacionesDeServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estacionesDeServiciosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estacionesDeServiciosActionPerformed

    private void estacionesDeServicios1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estacionesDeServicios1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estacionesDeServicios1ActionPerformed

    private void backupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupsActionPerformed
        // simulaci√≥n de backups
        testBaseDeDatosGoogleCloud();
        
    }//GEN-LAST:event_backupsActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CasaMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CasaMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CasaMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CasaMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CasaMatriz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField b93;
    private javax.swing.JTextField b95;
    private javax.swing.JTextField b97;
    private javax.swing.JButton backups;
    private javax.swing.JTextField disel;
    private javax.swing.JComboBox<String> estacionesDeServicios;
    private javax.swing.JComboBox<String> estacionesDeServicios1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField kerosene;
    private javax.swing.JButton precioAUno;
    private javax.swing.JButton reporte;
    // End of variables declaration//GEN-END:variables

    void agregarConexion(String nombre, String direccion) {
        //this.s.agregarConexion(nombre, direccion, ip);
        this.agregarEstacionesServiciosLocal(nombre, direccion);
        //this.agregarEstacionesServiciosGC(nombre, direccion);
        this.actualizarEstacionesServicios();
        //this.estacionesDeServicios.addItem(nombre + " " + direccion);
        
    }
     
    public void agregarEstacionesServiciosGC(String nombre, String direccion) {//aun no esta lista
        try {
            String sql = "insert into estacionesdeservicio(nombre, direccion) values('"+nombre+"','"+direccion+"')";
            con = conexionBDGoogleCloud.getConnection();
            st = con.createStatement();
            st.executeUpdate(sql);
            //JOptionPane.showMessageDialog(null, "Estacion de servicio registrada");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private void agregarEstacionesServiciosLocal(String nombre, String direccion) {
        try {
            String sql = "insert into estacionesdeservicio(nombre, direccion) values('"+nombre+"','"+direccion+"')";
            con = this.conexionBDLocal.getConnection();
            st = con.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Estacion de servicio registrada");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public void actualizarEstacionesServicios(){
        String sql = "Select * from estacionesdeservicio";
        try {
            ArrayList<EstacionDeServicio>estacionesDeServicio = new ArrayList<>();
            con = this.conexionBDLocal.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()) {
                EstacionDeServicio e = new EstacionDeServicio(rs.getInt("id"),rs.getString("nombre"),rs.getString("direccion"));
                estacionesDeServicio.add(e);
            }
            if (this.estacionesDeServicios.getItemCount() == 1) {
                for (int i = 0; i < estacionesDeServicio.size(); i++) {
                    //System.out.println("hola 1");
                    String s = estacionesDeServicio.get(i).getNombre()+" "+estacionesDeServicio.get(i).getDireccion();
                    this.estacionesDeServicios.addItem(s);
                    this.estacionesDeServicios1.addItem(s);
                }
            }
            else{
                String s = estacionesDeServicio.get(estacionesDeServicio.size()-1).getNombre()+" "+estacionesDeServicio.get(estacionesDeServicio.size()-1).getDireccion();
                this.estacionesDeServicios.addItem(s);
                this.estacionesDeServicios1.addItem(s);
            }
        } catch (Exception e) {
            //algo
        }
    }
    
    public void crearInforme(String estacion, String tipoCombustible,ArrayList<String[]> informe,int cantidadDeCargas, double litrosConsumidos){
        // Se crea el documento
        try {
           String nombre = estacion;
           String tipo = tipoCombustible;
           String ruta = nombre+"-"+tipo+".txt" ;
           String contenido = "Infome de consumo de combustible";
            ArrayList<String[]> inf = informe;
           File file = new File(ruta);
           // Si el archivo no existe es creado
           if (!file.exists()) {
               file.createNewFile();
           }
           FileWriter fw = new FileWriter(file);
           BufferedWriter bw = new BufferedWriter(fw);
           bw.write(contenido);
           bw.write("\n");
           bw.write("ID de la estaci√≥n  : "+nombre);
           bw.write("\n");
           bw.write("Tipo de combustible: "+tipo);
           bw.write("\n");
           bw.write("Cantidad de cargar : "+cantidadDeCargas);
           bw.write("\n");
           bw.write("Litros consumido   : "+litrosConsumidos);
           bw.write("\n");
           bw.write(" IdCompra - IdSurtidor - TipoCombustible - LitrosCargados - PrecioTotal");
            for (int i = 0; i < inf.size(); i++) {
                String cadena = " ";
                for (int j = 0; j < inf.get(i).length; j++) {
                    if(j==0){
                        cadena +=inf.get(i)[j] ;
                    }else{
                        cadena += "      -       "+inf.get(i)[j] ;
                    }
                }
                bw.write("\n");
                bw.write(cadena);

            }
           bw.close();
       } catch (Exception e) {
           e.printStackTrace();
       }
    }
    
    public void testBaseDeDatosGoogleCloud(){
        try {
            String sql = "insert into compras(idSurtidor, tipoCombustible, litrosCargados, precioTotal,fecha) values('" + "1" + "','" + "97" + "','" + "100" + "','" + "5000" + "25-03-2020"+"')";
            con = conexionBDGoogleCloud.getConnection();
            st = con.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Compra Registrada con Exito");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private void generarRespaldoCompras(){
        String sql = "Select * from compras";
        Precios p = null;
        try {
            this.backupCompras = new ArrayList<>();
            con = this.conexionBDGoogleCloud.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()) {
                Compra c = new Compra(rs.getInt("id"),rs.getInt("idSucursal"),rs.getInt("idCompra"),rs.getInt("idSurtidor"),rs.getString("tipoConbustible"),rs.getDouble("litrosCargados"),rs.getInt("precioTotal"),rs.getDate("fecha"));
                this.backupCompras.add(c);
            }
           
        } catch (Exception e) {
            //algo
        }
    }
    
    private void generarRespaldoEstaci√≥nDeServicio(){
        String sql = "Select * from estacionesdeservicio";
        try {
            this.backupEstacionDeServicio = new ArrayList<>();
            con = this.conexionBDGoogleCloud.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()) {
                EstacionDeServicio e = new EstacionDeServicio(rs.getInt("id"),rs.getString("nombre"),rs.getString("direccion"));
                this.backupEstacionDeServicio.add(e);
            }
           
        } catch (Exception e) {
            //algo
        }
    }
    
    private void generarRespaldoPrecios(){
        String sql = "Select * from Precios";
        try {
            this.backupPrecios = new ArrayList<>();
            con = this.conexionBDGoogleCloud.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()) {
                Precios p = new Precios(rs.getInt("id"),rs.getInt("idSucursal"),rs.getDouble("b93"),rs.getDouble("b95"),rs.getDouble("b97"),rs.getDouble("diesel"),rs.getDouble("kerosene"),rs.getDate("fecha"));
                this.backupPrecios.add(p);
            }
           
        } catch (Exception e) {
            //algo
        }
    }
    
    public void ingresarBackupsHaciaBDLocal(){
        this.generarRespaldoCompras();
        this.generarRespaldoEstaci√≥nDeServicio();
        this.generarRespaldoPrecios();
    
    }
        
        
}
